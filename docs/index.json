{
	"pages": [
		{"title": "Making the web faster with the JavaScript Binary AST", "text": "Making the web faster with the JavaScript Binary AST\nDavid Teller, Mozilla\nFosdem 2018\n\nThe problem\n\nGoogle Sheets, Google Docs, Yahoo!, LinkedIn, Facebook: 3-7 compressed Mb+ JS code.\nUpdated very often.\nFacebook: 500-900ms just parsing JavaScript (Chrome &amp; Firefox).\n\n\nWhy is JavaScript loading so slow?\n\n1. Get the code\n\nDownload and decompress source file.\nCovert encoding.\n...\n\n\n2. Tokenize the text (1)\nfunction foo(x) {\n    return y;\n}\n\n=&gt;\n\nToken.FunctionKeyword\nToken.Identifier(&quot;foo&quot;)\nToken.LPar\nToken.Identifier(&quot;x&quot;)\nToken.RPar\nToken.RBrace\n...\n\n\n2. Tokenize the text (2)\nTokenizing JS is hard:\n\nWhat does / mean?\nIs for an identifier or a keyword?\nHow can I store my string efficiently?\nIs &quot;use strict&quot; a string or a directive?\n...\n\nHint it depends.\n\n3. Parse the tokens (1)\nFunctionDeclaration {\n    isAsync: false,\n    isGenerator: false,\n    scope: ...,\n    name: BindingIdentifier {\n        name: &quot;foo&quot;\n    }\n    params: FormalParameters {\n        items: [\n            BindingIdentifier {\n                name: &quot;x&quot;\n            }\n        ]\n        rest: null,\n    }\n    body: FunctionBody {\n        directives: [],\n        statements: [\n            ReturnStatement {\n                expression: {\n                    IdentifierExpression {\n                        name: &quot;y&quot;\n                    }\n                }\n            }\n        ]\n    }\n}\n\n\n3. Parse the tokens (2)\nExercise:\nvar x = 10;\nfunction foo(isReady) {\n    if (isReady) {\n        return x + 10;\n    }\n    // ...\n}\n\nWhat is the return of foo(true)?\nHint it depends.\n\n3. Parse the tokens (3)\nParsing JS is hard:\nvar x = 10;\nfunction foo(isReady) {\n    if (isReady) {\n        return x + 10;\n    }\n}\nconsole.log(foo(true)); // `20`\n\nvar x = 10;\nfunction foo(isReady) {\n    if (isReady) {\n        return x + 10;\n    }\n    var x = 10;\n}\nconsole.log(foo(true)); // `NaN`\n\n\n3. Parse the tokens (4)\nParsing JS is hard:\n\nsyntax depends on &quot;use strict&quot;;\nvariables and this are so complicated, man!;\nresult depends on the presence of eval, with, ...;\nyou can&#39;t skip anything;\n\n\n4. Wait, there&#39;s more!\n\nGenerate browser-specific bytecode.\nExecute!\n\n\nSo what can we make faster?\n\nDownload source file.\nDecompress source file.\nConvert encoding.\nTokenize.\nParse.\nGenerate Bytecode.\nStart execution.\n\n\nThings people have tried\n\nBrowser improvements\nLazy parsers (1)\nBytecode caching (4)\n\n\nJavaScript frameworks/toolchains\nLazy loaders (2)\nMinimizers (1)\n\n\nBrowser APIs\nServiceWorker loaders (2, 3)\nWasm (2)\n\n\n\n(1) Impacts global performance.\n(2) Requires rewrite.\n(3) Hurts the web.\n(4) Works when the JS of the page doesn&#39;t change.\n\nIntroducing the JavaScript Binary AST\n\nObjectives\n\nA new file format for JavaScript code.\nSmaller than .js, much faster to parse.\nNot uglified.\n\n\nRecall the AST?\nFunctionDeclaration {\n    isAsync: false,\n    isGenerator: false,\n    scope: ...,\n    name: BindingIdentifier {\n        name: &quot;foo&quot;\n    }\n    params: FormalParameters {\n        items: [\n            BindingIdentifier {\n                name: &quot;x&quot;\n            }\n        ]\n        rest: null,\n    }\n    body: FunctionBody {\n        directives: [],\n        statements: [\n            ReturnStatement {\n                expression: {\n                    IdentifierExpression {\n                        name: &quot;y&quot;\n                    }\n                }\n            }\n        ]\n    }\n}\n\n\nTransform it to this:\n1: &quot;foo&quot;,\n[/*FunctionDeclaration*/ 42,  /*isAsync*/0, /*isGenerator*/0, ..., /*name*//*BindingIdentifier*/ 43, /*foo*/1, ...]\n\n(except compressed)\n\nFlow\n\nDownload binjs file.\nTokenize + Parse only what you use.\nGenerate Bytecode.\nStart execution.\n\n\nWhat is faster?\n\nSmaller file (1).\nParsing can start earlier.\nTrivial tokenization.\nFormat is proof-carrying.\nHard cases this, var, let, ... are already processed.\n\n\nParse only the code you execute, when needed.\nParse strings, identifiers, ... only once.\nMore opportunities for concurrency.\n\n(1) Hopefully.\n\nCalendar\n\nEarly 2017: Proof of concept\nNo security.\nExtreme speed improvements (1).\nPretty good size improvements (1).\n\n\nEarly 2018: Working on prototype 3\nFull security (WIP)\nSpeed not measured.\nSize improvements... need improvements (1).\n\n\nLate summer 2018\nTests on major websites.\n\n\n\n(1) No hard numbers because it&#39;s too early to make promises.\n\nIs there time for a demo?\n\nThanks for listening.\nAny questions?\n", "tags": "", "url": "binast.html"}
	]
}
